{
  "name": "builder-jade",
  "description": "Jade plugin for component-builder",
  "version": "1.0.1",
  "author": {
    "name": "Jonathan Ong",
    "email": "me@jongleberry.com",
    "url": "http://jongleberry.com"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/component/builder-jade"
  },
  "dependencies": {
    "jade": "*"
  },
  "devDependencies": {
    "mkdirp": "~0.3.5",
    "mocha": "1",
    "should": "3",
    "co": "3",
    "component-builder": "^1.0.0",
    "component-resolver": "^1.0.0",
    "gnode": "0"
  },
  "scripts": {
    "test": "NODE=gnode make test"
  },
  "readme": "# builder-jade\n\nJade plugin for [component-builder2](https://github.com/component/builder2.js).\n\n- Caches compilations\n- Either include the runtime as a dependency or a global\n- Compiles the debugging version in development environment\n- Option to compile the template to an HTML string\n\n## Example\n\n```js\nvar fs = require('fs');\nvar build = require('component-builder2');\nvar jade = require('builder-jade');\n\nbuild.scripts(nodes)\n  .use('scripts', build.plugins.js())\n  .use('templates', build.plugins.string())\n  .use('templates', jade({\n    string: true,\n  }))\n  .use('jade', jade({\n    runtime: false,\n  }))\n  .build(function (err, string) {\n    if (err) throw err;\n\n    fs.writeFileSync('build.js', string);\n  })\n```\n\nYou could put your jade files in `.templates` or create your own field like `.jade`.\n\nWithout the global runtime, you have to define the `visionmedia/jade` dependency in every component that uses jade templates. This is quite annoying:\n\n```json\n{\n  \"name\": \"widget\",\n  \"dependencies\": {\n    \"visionmedia/jade\": \"*\"\n  },\n  \"templates\": [\n    \"index.jade\"\n  ]\n}\n```\n\nIf you want to avoid this as, use the global runtime.\n\n## Options\n\nPlugin options:\n\n- `string` - compile the template as an HTML string instead of a function.\n- `runtime` - use the global runtime instead of using a local `jade` dependency. See below.\n\nJade options:\n\n- `pretty`\n- `self`\n- `debug`\n- `compiler`\n- `globals`\n\n## Global Runtime\n\nYou may use the global runtime by prepending `jade.runtime` to your build and using the `.runtime` option:\n\n```js\nbuild.scripts(nodes)\n  .use('templates', jade({\n    runtime: true\n  }))\n  .build(function (err, string) {\n    if (err) throw err;\n    string = jade.runtime + string;\n    fs.writeFileSync('build.js', string);\n  })\n```\n\nThis will create a global `jade` variable. However, the benefits are:\n\n- Smaller `.js` build\n- No more defining `visionmedia/jade` as a dependency in every component\n\nHowever, you now essentially have to manage this dependency yourself.\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2014 Jonathan Ong me@jongleberry.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/component/builder-jade/issues"
  },
  "_id": "builder-jade@1.0.1",
  "_from": "builder-jade@1.0.1"
}
