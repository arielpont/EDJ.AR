{
  "author": {
    "name": "Cristian Douce"
  },
  "name": "mongoose-voting",
  "version": "0.1.1",
  "description": "Mongoose plugin for upvote/downvote models. Extends Mongoose model with voting functionality.",
  "main": "index.js",
  "dependencies": {},
  "devDependencies": {
    "mongoose": "~3.6.11",
    "mocha": "1.11.0"
  },
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:cristiandouce/mongoose-voting.git"
  },
  "keywords": [
    "vote",
    "voting",
    "mongoose",
    "upvote",
    "downvote",
    "census"
  ],
  "license": "MIT",
  "readme": "# mongoose-voting\n\n  Mongoose plugin to upvote/downvote stuff. Extends any model with handy methods for voting.\n\n  [![Build Status](https://travis-ci.org/cristiandouce/mongoose-voting.png?branch=master)](https://travis-ci.org/cristiandouce/mongoose-voting)\n\n## Install\n\n```\n  $ npm install mongoose-voting\n```\n\n## Usage example\n\n```js\n  var CommentSchema = new Schema({..});\n\n  // Default voter is `User` model\n  CommentSchema.plugin(voting);\n\n  // Or you can tell `mongoose-voting`\n  // which model references\n  CommentSchema.plugin(voting, { ref: 'Author' });\n\n  // ...\n\n  var author = new Author({});\n  var comment = new Comment({});\n\n  // upvote and check\n  comment.upvote(author);\n  comment.upvoted(author);      // true\n  comment.downvoted(author);    // false\n\n  // downvote with save\n  comment.downvote(author, function(err, doc) {\n    asser.equal(doc, comment);  // true\n    doc.downvoted(author);      // true\n  });\n\n  comment.voted(author);        // true\n```\n\n## API\n\n### .upvote(user)\n  Upvotes document by user. `user` can be either a model instance (like `User`), an `ObjectId` or even the hex string from `ObjectId`.\n```js\n  comment.upvote(author);\n  comment.voted(author);    // true\n  comment.upvoted(author);  // true\n```\n\n### .upvote(user, fn)\n  Same as `.upvote(user)` but calls `save` on model with `fn` function as callback.\n```js\n  comment.upvote(author, function(err, doc) {\n    doc.voted(author);    // true\n    doc.upvoted(author);  // true\n  });\n```\n\n### .downvote(user)\n  Downvotes document by user. `user` can be either a model instance (like `User`), an `ObjectId` or even the hex string from `ObjectId`.\n```js\n  comment.upvote(author);\n  comment.voted(author);    // true\n  comment.upvoted(author);  // true\n```\n\n### .downvote(user, fn)\n  Same as `.downvote(user)` but calls `save` on model with `fn` function as callback.\n```js\n  comment.downvote(author, function(err, doc) {\n    doc.voted(author);      // true\n    doc.downvoted(author);  // true\n  });\n```\n\n### .upvoted(user)\n  Returns `true` if document was 'upvoted' by user. `false` otherwise.\n```js\n  comment.upvote(user);\n  comment.upvoted(user);    // true\n  comment.downvoted(user);  // false\n```\n\n### .downvoted(user)\n  Returns `true` if document was 'downvoted' by user. `false` otherwise.\n```js\n  comment.downvote(user);\n  comment.upvoted(user);    // false\n  comment.downvoted(user);  // true\n```\n\n### .voted(user)\n  Returns `true` if document was 'upvoted' or 'downvoted' by user. `false` otherwise.\n```js\n  comment.downvote(user);\n  comment.voted(user);    // true\n  comment.upvote(user);\n  comment.voted(user);    // true\n```\n\n### .upvotes()\n  Returns Number of `upvotes` count.\n```js\n  comment.downvote(user);\n  comment.upvotes();      // 0\n  comment.upvote(user);\n  comment.upvotes();      // 1\n```\n\n### .downvotes()\n  Returns Number of `downvotes` count.\n```js\n  comment.downvote(user);\n  comment.upvotes();      // 1\n  comment.upvote(user);\n  comment.upvotes();      // 0\n```\n\n### .votes()\n  Returns Number of `votes` count.\n```js\n  comment.downvote(user);\n  comment.votes();          // 1\n  comment.upvote(user);\n  comment.votes();          // 1\n  comment.downvote(user2);\n  comment.votes();          // 2\n```\n\n## Test\n\n```\n  $ npm install --dev\n  $ make test\n```\n## License\n\n  MIT",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/cristiandouce/mongoose-voting/issues"
  },
  "_id": "mongoose-voting@0.1.1",
  "_from": "mongoose-voting@0.1.1"
}
